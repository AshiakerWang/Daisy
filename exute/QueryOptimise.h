
#include <string>
#include "sql_preprocess.h"
using namespace std;

enum OPERATORTYPE{JOIN, SELECT, PROJECTION, TRANSFER, UNION}; 
struct Operator{
	OPERATORTYPE operatorIndex;
	int source_frag_num;
	int* source_site_id[3];
	int target_site_id
	//Site targetSite;//targetSite is null uless operatorIndex is TRANSFER.

	string* source_frag_ids;
	string target_table_id;//if TRANSFER, targetTable is on targetSite,for saving result table.
	
	PREDTYPE pred_type;
	predicateV predv;
	predicateS preds;
	predicateT predt;

}

	/*
		sourceTableCount is not used uless operatorIndex is UNION;
		JOIN: sourceTable[0],sourceTable[1]
		SELECTION: sourceTable[0]
		PROJECTION: sourceTable[0]
		TRANSFER: sourceTable[0] which is on sourceSite
		UNION: *sourceTable the most num of union is 3
	*/
	/*
	sqlParameters only used in the following 2 cases:
			select A from sourceTable[0] where C
		SELECTION, PROJECTION: sqlParameters[0] = A, sqlParameters[1] = C
			select A from B where soureTable[0].C = sourceTable[1].C
		JOIN: sqlParameters[0] = C
	*/
struct OperatorSet{
	int Count;
	Operator list[MaxOpNum];
}

struct Result{
	string target_table;
	int target_site;
}

void get_data_distribution(int frag_id);
string rela_to_token(RELATION rela);
int find_site(int frag_id);
string find_table_name(int frag_id);

class query_plan{
	private:
		bool s_join = 1;
		query_tree queryTree; 
		Result excute_one_operator(Operator operator);


		void partition_range(Operator *transfer);
		string semi_join(int target_site, string frag_id1m, string frag_id2);
		string* how_to_transfer(string* frag_ids);
	public:
		query_plan(query_tree $queryTree);
		~query_plan()
		string excute_query_plan();
			//if JOIN,SELECTION,PROJECTION: return the result table after sourceSite excute the sql statement,which is generated by Excute.(sql is support by class Mysql)
			//if TRANSFORM: return a temp table to save the targetTable on targetSite.
			//if UNION: return result table use sql statement(insert)
			//Post order traversal, and before excute join, do semi_join; before excute transfer, do how_to_transform and partition_range(*).
};
